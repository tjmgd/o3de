/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_inputColor;
    RWTexture2D<float4> m_outputColor;
    Texture2D<float4> m_grain;

    Sampler m_sampler
    {
        AddressU = Mirror;
        AddressV = Mirror;
        AddressW = Mirror;
    };

    // Must match the struct in FilmGrainPass.cpp
    struct Constants
    {
        uint2 m_outputSize; // texture size of output
        float m_intensity; // intensity of effect (0 to 1)
        float m_luminanceDampening; // factor for dampening effect in areas of high and low luminance
        float m_tilingScale; // scaling factor for tiling
    };
    Constants m_constants;
}

[numthreads(8, 8, 1)]
void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
    {
        return;
    }

    float4 base = PassSrg::m_inputColor[dispatchThreadID.xy];

    // The contribution of each channel to luminance
    float3 lum = float3(0.21, 0.72, 0.07);
    lum *= base.rgb;
    
    // Determine UV wrt tiling scale
    float2 grainUV = PassSrg::m_constants.m_tilingScale * dispatchThreadID.xy / PassSrg::m_constants.m_outputSize;

    float2 a = SceneSrg::m_time * grainUV * lum.rg; //float2(0.26, 0.37);

    // Vary UV according to time (approximating 24fps as in most film)
    grainUV += trunc(SceneSrg::m_time / 0.04167);

    //grainUV += a;

    float grainVal = PassSrg::m_grain.SampleLevel(PassSrg::m_sampler, grainUV, 0).r;
    grainVal *= ;
    grainVal *= PassSrg::m_constants.m_intensity;
    base *= 1 - PassSrg::m_constants.m_intensity;
    base = base + grainVal;
    PassSrg::m_outputColor[dispatchThreadID.xy] = base;
    //PassSrg::m_outputColor[dispatchThreadID.xy] = float4(grainVal, grainVal, grainVal, base.a);
}
