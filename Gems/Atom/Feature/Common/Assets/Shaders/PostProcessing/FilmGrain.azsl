/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_inputColor;
    RWTexture2D<float4> m_outputColor;

    // Must match the struct in .cpp
    struct Constants
    {
        uint2 m_outputSize; // texture size of output
        float m_strength; // strength of effect (0 to 1)
    };
    Constants m_constants;
}

[numthreads(8, 8, 1)]
void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
    {
        return;
    }

    //float2 disp = dispatchThreadID.xy - PassSrg::m_constants.m_outputCenter;
    //float2 offset = trunc(disp * PassSrg::m_constants.m_strength);
    //float2 offset = disp * PassSrg::m_constants.m_strength;

    //float r = (PassSrg::m_inputColor[dispatchThreadID.xy] + PassSrg::m_inputColor[dispatchThreadID.xy - offset].r) * 0.5;
    //float r = PassSrg::m_inputColor[dispatchThreadID.xy].r;
    //float r = PassSrg::m_inputColor[dispatchThreadID.xy + offset].r;
    //float g = PassSrg::m_inputColor[dispatchThreadID.xy].g;
    //float g = PassSrg::m_inputColor[dispatchThreadID.xy - trunc(offset * 0.5)].g;
    //float b = PassSrg::m_inputColor[dispatchThreadID.xy - trunc(offset)].b;
    float3 lumMagicNum = float3(0.21, 0.72, 0.07);
    float lum = dot(PassSrg::m_inputColor[dispatchThreadID.xy].xyz, lumMagicNum);

    //float grain = frac(7919.6701 * sin(mad(PassSrg::m_constants.m_time, dispatchThreadID.x, dispatchThreadID.y)));
    float grain = frac(7919.6701 * sin(SceneSrg::m_time * dot(dispatchThreadID.xy, float2(1232.3423, 23432.342))));

    //PassSrg::m_outputColor[dispatchThreadID.xy] = PassSrg::m_inputColor[dispatchThreadID.xy] + grain;
    //PassSrg::m_outputColor[dispatchThreadID.xy] = mad(grain, (lum - lum * lum) * 4, PassSrg::m_inputColor[dispatchThreadID.xy]);
    //PassSrg::m_outputColor[dispatchThreadID.xy] = mad(grain * PassSrg::m_constants.m_strength, (lum - lum * lum) * 4, PassSrg::m_inputColor[dispatchThreadID.xy]);
    //float timetest = SceneSrg::m_time / 400.0;
    PassSrg::m_outputColor[dispatchThreadID.xy] = float4(grain, grain, grain, 1.0);
}